default:
  interruptible: true
  timeout: 1 hour

stages:
  - commit
  - acceptance
  - deploy-staging
  - deploy-production

.assume_role: &assume_role
  - >
    STS=($(aws sts assume-role-with-web-identity
    --role-arn ${AWS_ROLE_ARN}
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}"
    --web-identity-token $ID_TOKEN
    --duration-seconds 3600
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]'
    --output text))
  - export AWS_ACCESS_KEY_ID="${STS[0]}"
  - export AWS_SECRET_ACCESS_KEY="${STS[1]}"
  - export AWS_SESSION_TOKEN="${STS[2]}"

CLIENT_UNIT_TEST:
  image: node:20-alpine
  stage: commit
  script:
    - cd client
    - npm install
    - CI=true npm test

CLIENT_BUILD:
  image: node:20-alpine
  stage: commit
  script:
    - cd client
    - npm install
    - npm run build
  artifacts:
    paths:
      - client/build
    when: on_success

CLIENT_DEPLOY_STAGING:
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
    ID_TOKEN:
      aud: habit_kicker_react_s3
  stage: deploy-staging
  script:
    - *assume_role
    - aws s3 sync client/build s3://${S3_BUCKET}/staging
    - aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths "/index.html"

CLIENT_DEPLOY_PRODUCTION:
  image:
    name: amazon/aws-cli:latest
    entrypoint:
      - '/usr/bin/env'
  id_tokens:
    ID_TOKEN:
      aud: habit_kicker_react_s3
  stage: deploy-production
  when: manual
  script:
    - *assume_role
    - aws s3 sync client/build s3://${S3_BUCKET}/production
    - aws cloudfront create-invalidation --distribution-id ${STAGING_DISTRIBUTION_ID} --paths "/index.html"

CYPRESS:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: commit
  script:
#    - docker compose -f docker-compose.ci.yml up -d
    - ls
    - ls ci
    - chmod +x ci/test_api_up.sh
    - ./ci/test_api_up.sh
#    - docker compose stop

